name: Weekly Qdrant Upload

on:
  # Run every Sunday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create credentials file
      run: |
        mkdir -p ./credentials
        echo '${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}' > ./credentials/service-account.json
        echo "Credentials file created successfully"
    
    - name: Set up environment variables
      run: |
        echo "GOOGLE_DRIVE_CREDENTIALS_PATH=./credentials/service-account.json" >> $GITHUB_ENV
        # Multi-collection configuration (JSON format) - takes precedence if set
        if [ -n "${{ secrets.COLLECTIONS_CONFIG }}" ]; then
          echo "COLLECTIONS_CONFIG=${{ secrets.COLLECTIONS_CONFIG }}" >> $GITHUB_ENV
          echo "Using multi-collection configuration"
        else
          # Legacy single-collection configuration for backward compatibility
          echo "GOOGLE_DRIVE_FOLDER_IDS=${{ secrets.GOOGLE_DRIVE_FOLDER_IDS }}" >> $GITHUB_ENV
          echo "QDRANT_HOST=${{ secrets.QDRANT_HOST }}" >> $GITHUB_ENV
          echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> $GITHUB_ENV
          echo "QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }}" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "EMBEDDING_MODEL=text-embedding-ada-002" >> $GITHUB_ENV
          echo "CHUNK_SIZE=1000" >> $GITHUB_ENV
          echo "CHUNK_OVERLAP=200" >> $GITHUB_ENV
          echo "INCLUDE_SUBFOLDERS=true" >> $GITHUB_ENV
          echo "Using legacy single-collection configuration"
        fi
    
    - name: Run uploader
      run: |
        echo "Starting AWSNA Qdrant AutoUploader..."
        echo "Python version: $(python --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory: $(ls -la)"
        echo "Environment variables:"
        echo "GOOGLE_DRIVE_CREDENTIALS_PATH: $GOOGLE_DRIVE_CREDENTIALS_PATH"
        echo "COLLECTIONS_CONFIG present: $(if [ -n "$COLLECTIONS_CONFIG" ]; then echo 'Yes'; else echo 'No'; fi)"
        
        # Check if secrets are properly set
        echo "Checking secrets configuration..."
        if [ -z "$COLLECTIONS_CONFIG" ]; then
          echo "WARNING: COLLECTIONS_CONFIG environment variable is empty"
          echo "This means the GitHub secret may not be set properly"
        else
          echo "COLLECTIONS_CONFIG is present and non-empty"
        fi
        
        echo "Running main.py..."
        set -e  # Exit on any error
        python main.py 2>&1 | tee uploader.log
        exit_code=${PIPESTATUS[0]}
        echo "Python exit code: $exit_code"
        
        if [ $exit_code -ne 0 ]; then
          echo "ERROR: Python script failed with exit code $exit_code"
          exit $exit_code
        fi
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: uploader-logs
        path: |
          uploader.log
          *.log
        retention-days: 30
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "Upload failed! Check the logs artifact for details."
        echo "::error::Weekly Qdrant upload failed. Check logs for details."